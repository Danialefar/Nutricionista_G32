/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package nutricionista_g32;

import Nutricionista_G32_accesoDatos.Dieta_Comida_Data;
import Nutricionista_G32_accesoDatos.Dieta_Data;
import Nutricionista_G32_accesoDatos.Paciente_Data;
import Nutricionista_G32_entidades.Dieta;
import Nutricionista_G32_entidades.Dieta_Comida;
import Nutricionista_G32_entidades.Paciente;
import java.util.Iterator;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

public class ConsultaDietaComida extends javax.swing.JInternalFrame {

    private DefaultTableModel modelo;
    private DefaultTableModel model;

    public ConsultaDietaComida() {
        initComponents();
        modelo = (DefaultTableModel) jTablaDieta.getModel();
        model = (DefaultTableModel) jTablaComida.getModel();
        vistaA();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jTdniBuscar = new javax.swing.JTextField();
        jBbuscar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTablaDieta = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTablaComida = new javax.swing.JTable();
        jLabel2 = new javax.swing.JLabel();
        jLpaciente = new javax.swing.JLabel();

        setClosable(true);
        setTitle("Consulta Dieta Comida");

        jLabel1.setText("D.N.I. del Paciente");

        jBbuscar.setText("BUSCAR");
        jBbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbuscarActionPerformed(evt);
            }
        });

        jTablaDieta.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "Tipo", "Peso Inicial", "Fecha de comienzo"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablaDieta.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTablaDietaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(jTablaDieta);
        if (jTablaDieta.getColumnModel().getColumnCount() > 0) {
            jTablaDieta.getColumnModel().getColumn(0).setMinWidth(30);
            jTablaDieta.getColumnModel().getColumn(0).setPreferredWidth(30);
            jTablaDieta.getColumnModel().getColumn(0).setMaxWidth(30);
        }

        jTablaComida.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null},
                {null, null},
                {null, null},
                {null, null}
            },
            new String [] {
                "Tipo", "Detalle"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jTablaComida.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTablaComida);
        if (jTablaComida.getColumnModel().getColumnCount() > 0) {
            jTablaComida.getColumnModel().getColumn(0).setMinWidth(120);
            jTablaComida.getColumnModel().getColumn(0).setPreferredWidth(120);
            jTablaComida.getColumnModel().getColumn(0).setMaxWidth(120);
        }

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 12)); // NOI18N
        jLabel2.setText("Comidas incluidas en la dieta seleccionada");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(17, 17, 17)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 825, Short.MAX_VALUE)
                            .addComponent(jScrollPane1)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLpaciente, javax.swing.GroupLayout.PREFERRED_SIZE, 514, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addGap(44, 44, 44)
                                .addComponent(jTdniBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(53, 53, 53)
                                .addComponent(jBbuscar)))))
                .addContainerGap(27, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(jLabel2)
                .addGap(290, 290, 290))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(jTdniBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBbuscar))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLpaciente, javax.swing.GroupLayout.DEFAULT_SIZE, 11, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 115, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel2)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbuscarActionPerformed
        Paciente_Data pD = new Paciente_Data();
        Paciente paciente = new Paciente();
        Dieta_Data dD = new Dieta_Data();
        borrarFilas();
        borrarFilas1();
        jTablaDieta.setEnabled(true);
        try {
            int dni = Integer.parseInt(jTdniBuscar.getText());
            paciente = pD.buscarPacientePorDni(dni);

            if (paciente != null) {
                if (paciente.isEstado() == false) {
                    JOptionPane.showMessageDialog(null, "El paciente está dado de baja, deberá activarlo nuevamente");
                    jTdniBuscar.setText("");

                } else if (!dD.buscarDietaPorPaciente(paciente.getId_paciente())) {
                    JOptionPane.showMessageDialog(null, "El paciente no tiene una dieta asignada, debe registrar una dieta");

                    jTdniBuscar.setText("");
                } else {
                    jLpaciente.setText(paciente.toString());
                    int id = paciente.getId_paciente();
                    for (Dieta dieta : dD.listarDietasNOFinalizadasPorPaciente(id)) {
                        modelo.addRow(new Object[]{
                            dieta.getId_dieta(),
                            dieta.getNombre_dieta(),
                            dieta.getPeso_incial(),
                            dieta.getFecha_inicial(),});
                            jLpaciente.setEnabled(true);
                    }
                    for (Dieta dieta1 : dD.listarDietasFinalizadasPorPaciente(id)) {
                        modelo.addRow(new Object[]{
                            dieta1.getId_dieta(),
                            dieta1.getNombre_dieta(),
                            dieta1.getPeso_incial(),
                            dieta1.getFecha_inicial(),});

                    }
                }
            }
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(null, "Debe ingresar un número de D.N.I. válido");
            jTdniBuscar.setText("");
        }
    }//GEN-LAST:event_jBbuscarActionPerformed

    private void jTablaDietaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTablaDietaMouseClicked
        borrarFilas1();
        int filaSelec = jTablaDieta.getSelectedRow();
        int id = Integer.parseInt(jTablaDieta.getValueAt(filaSelec, 0) + "");
        Dieta_Comida_Data dcD = new Dieta_Comida_Data();

        if (filaSelec != -1) {
            if(dcD.buscarDietaExistente(id)==true){
            for (Dieta_Comida dC : dcD.listarDetalleComidas(id)) {
                model.addRow(new Object[]{
                    dC.getTipo_comida(),
                    dC.getComida().getDetalle_comida(),});
            }
        }else{
              JOptionPane.showMessageDialog(null, "El paciente no tiene asignado comidas a su Dieta"+'\n'
                      + "Debe cargar el Menu Dieta Comida ");  
            }
        }
    }//GEN-LAST:event_jTablaDietaMouseClicked


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBbuscar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLpaciente;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTablaComida;
    private javax.swing.JTable jTablaDieta;
    private javax.swing.JTextField jTdniBuscar;
    // End of variables declaration//GEN-END:variables
private void vistaA() {
        jTablaDieta.setEnabled(false);
        jTablaComida.setEnabled(false);
        jLpaciente.setEnabled(false);
        jLpaciente.setText("");
    }

    private void vistaB() {
        jTablaDieta.setEnabled(false);
        jTablaComida.setEnabled(false);
        jLpaciente.setEnabled(false);

    }

    private void borrarFilas() {
        int f = jTablaDieta.getRowCount() - 1;
        for (; f >= 0; f--) {
            modelo.removeRow(f);
        }
    }

    private void borrarFilas1() {
        int f = jTablaComida.getRowCount() - 1;
        for (; f >= 0; f--) {
            model.removeRow(f);
        }
    }
}
